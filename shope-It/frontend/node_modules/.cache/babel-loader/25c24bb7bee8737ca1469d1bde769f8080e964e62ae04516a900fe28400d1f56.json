{"ast":null,"code":"import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\nimport { userApi } from \"./userApi\";\nexport const authApi = createApi({\n  reducerPath: \"authApi\",\n  baseQuery: fetchBaseQuery({\n    baseUrl: \"/api/v1\"\n  }),\n  endpoints: builder => ({\n    register: builder.mutation({\n      query(body) {\n        return {\n          url: \"/register\",\n          method: \"POST\",\n          body\n        };\n      },\n      async onQueryStarted(args, {\n        dispatch,\n        queryFulfilled\n      }) {\n        try {\n          await queryFulfilled;\n          await dispatch(userApi.endpoints.getMe.initiate(null));\n        } catch (error) {\n          console.log(error);\n        }\n      }\n    }),\n    login: builder.mutation({\n      query(body) {\n        return {\n          url: \"/login\",\n          method: \"POST\",\n          body\n        };\n      },\n      async onQueryStarted(args, {\n        dispatch,\n        queryFulfilled\n      }) {\n        try {\n          await queryFulfilled; //onces the above login(query) is Fulfilled that means we are successfully logged in , then we have to set the token, now we simply have to load the current user in the state and also in the header , we simply dispatch here that is getMe that will be initiate that getMe ruot that will send the request to the backend and set the user in the state and also in the header\n          await dispatch(userApi.endpoints.getMe.initiate(null));\n        } catch (error) {\n          console.log(error);\n        }\n      }\n    }),\n    logout: builder.query({\n      query: () => \"/logout\"\n    })\n  })\n});\nexport const {\n  useLoginMutation,\n  useRegisterMutation,\n  useLazyLogoutQuery\n} = authApi;","map":{"version":3,"names":["createApi","fetchBaseQuery","userApi","authApi","reducerPath","baseQuery","baseUrl","endpoints","builder","register","mutation","query","body","url","method","onQueryStarted","args","dispatch","queryFulfilled","getMe","initiate","error","console","log","login","logout","useLoginMutation","useRegisterMutation","useLazyLogoutQuery"],"sources":["C:/Users/patil/OneDrive/Desktop/Developmment/shope-It/frontend/src/redux/api/authApi.js"],"sourcesContent":["import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\r\nimport { userApi } from \"./userApi\";\r\n\r\nexport const authApi = createApi({\r\n  reducerPath: \"authApi\",\r\n  baseQuery: fetchBaseQuery({ baseUrl: \"/api/v1\" }),\r\n  endpoints: (builder) => ({\r\n    register: builder.mutation({\r\n      query(body) {\r\n        return {\r\n          url: \"/register\",\r\n          method: \"POST\",\r\n          body,\r\n        };\r\n      },\r\n      async onQueryStarted(args, { dispatch, queryFulfilled }) {\r\n        try {\r\n          await queryFulfilled;\r\n          await dispatch(userApi.endpoints.getMe.initiate(null));\r\n        } catch (error) {\r\n          console.log(error);\r\n        }\r\n      },\r\n    }),\r\n    login: builder.mutation({\r\n      query(body) {\r\n        return {\r\n          url: \"/login\",\r\n          method: \"POST\",\r\n          body,\r\n        };\r\n      },\r\n      async onQueryStarted(args, { dispatch, queryFulfilled }) {\r\n        try {\r\n          await queryFulfilled; //onces the above login(query) is Fulfilled that means we are successfully logged in , then we have to set the token, now we simply have to load the current user in the state and also in the header , we simply dispatch here that is getMe that will be initiate that getMe ruot that will send the request to the backend and set the user in the state and also in the header\r\n          await dispatch(userApi.endpoints.getMe.initiate(null));\r\n        } catch (error) {\r\n          console.log(error);\r\n        }\r\n      },\r\n    }),\r\n    logout: builder.query({\r\n      query: () => \"/logout\",\r\n    }),\r\n  }),\r\n});\r\n\r\nexport const { useLoginMutation, useRegisterMutation, useLazyLogoutQuery } =\r\n  authApi;\r\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,cAAc,QAAQ,8BAA8B;AACxE,SAASC,OAAO,QAAQ,WAAW;AAEnC,OAAO,MAAMC,OAAO,GAAGH,SAAS,CAAC;EAC/BI,WAAW,EAAE,SAAS;EACtBC,SAAS,EAAEJ,cAAc,CAAC;IAAEK,OAAO,EAAE;EAAU,CAAC,CAAC;EACjDC,SAAS,EAAGC,OAAO,KAAM;IACvBC,QAAQ,EAAED,OAAO,CAACE,QAAQ,CAAC;MACzBC,KAAKA,CAACC,IAAI,EAAE;QACV,OAAO;UACLC,GAAG,EAAE,WAAW;UAChBC,MAAM,EAAE,MAAM;UACdF;QACF,CAAC;MACH,CAAC;MACD,MAAMG,cAAcA,CAACC,IAAI,EAAE;QAAEC,QAAQ;QAAEC;MAAe,CAAC,EAAE;QACvD,IAAI;UACF,MAAMA,cAAc;UACpB,MAAMD,QAAQ,CAACf,OAAO,CAACK,SAAS,CAACY,KAAK,CAACC,QAAQ,CAAC,IAAI,CAAC,CAAC;QACxD,CAAC,CAAC,OAAOC,KAAK,EAAE;UACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;QACpB;MACF;IACF,CAAC,CAAC;IACFG,KAAK,EAAEhB,OAAO,CAACE,QAAQ,CAAC;MACtBC,KAAKA,CAACC,IAAI,EAAE;QACV,OAAO;UACLC,GAAG,EAAE,QAAQ;UACbC,MAAM,EAAE,MAAM;UACdF;QACF,CAAC;MACH,CAAC;MACD,MAAMG,cAAcA,CAACC,IAAI,EAAE;QAAEC,QAAQ;QAAEC;MAAe,CAAC,EAAE;QACvD,IAAI;UACF,MAAMA,cAAc,CAAC,CAAC;UACtB,MAAMD,QAAQ,CAACf,OAAO,CAACK,SAAS,CAACY,KAAK,CAACC,QAAQ,CAAC,IAAI,CAAC,CAAC;QACxD,CAAC,CAAC,OAAOC,KAAK,EAAE;UACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;QACpB;MACF;IACF,CAAC,CAAC;IACFI,MAAM,EAAEjB,OAAO,CAACG,KAAK,CAAC;MACpBA,KAAK,EAAEA,CAAA,KAAM;IACf,CAAC;EACH,CAAC;AACH,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEe,gBAAgB;EAAEC,mBAAmB;EAAEC;AAAmB,CAAC,GACxEzB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}