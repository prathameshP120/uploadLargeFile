{"ast":null,"code":"import { configureStore } from \"@reduxjs/toolkit\";\nimport userReducer from \"./features/userSlice\";\nimport { productApi } from \"./api/productsApi\";\nimport { authApi } from \"./api/authApi\";\nimport { userApi } from \"./api/userApi\";\nexport const store = configureStore({\n  reducer: {\n    auth: userReducer,\n    [productApi.reducerPath]: productApi.reducer,\n    [authApi.reducerPath]: authApi.reducer,\n    [userApi.reducerPath]: userApi.reducer\n  },\n  middleware: getDefaultMiddleware => getDefaultMiddleware().concat([productApi.middleware, authApi.middleware, userApi.middleware])\n});\n\n/*\r\nSure, let's dive deeper into this part of the Redux store setup to make it even clearer.\r\n\r\nSetting Up Reducers\r\njavascript\r\nCopy code\r\nreducer: {\r\n  [productApi.reducerPath]: productApi.reducer,\r\n},\r\nreducer Property\r\nDefinition: The reducer property in configureStore is used to define the root reducer for the Redux store. The root reducer is an object where each key corresponds to a slice of state and each value is the reducer function that manages that slice of state.\r\n[productApi.reducerPath]: productApi.reducer\r\nDynamic Key: [productApi.reducerPath] is a computed property name in JavaScript. It means that the key in the reducer object is determined by the value of productApi.reducerPath.\r\nproductApi.reducerPath: This is a property provided by the API slice created with RTK Query. It typically resolves to a string like \"productApi\".\r\nReducer Function: productApi.reducer is the reducer function generated by RTK Query. This reducer function handles the state changes for the API slice, such as storing the fetched data, managing loading states, and handling errors.\r\nHow It Works Together\r\nComputed Property Name:\r\n\r\nWhen you use [productApi.reducerPath]: productApi.reducer, JavaScript evaluates productApi.reducerPath and uses its value as the key in the reducer object.\r\nIf productApi.reducerPath is \"productApi\", the reducer object will have a key named \"productApi\".\r\nStoring API State:\r\n\r\nproductApi.reducer is a function that handles the state changes for the API interactions defined in the productApi slice.\r\nBy assigning productApi.reducer to the key productApi.reducerPath, you ensure that the state managed by this reducer is stored under that key in the Redux store.\r\nRedux Store Structure:\r\n\r\nWith this configuration, the Redux store's state will have a structure where the state managed by productApi is nested under the key specified by productApi.reducerPath.\r\nFor example, if productApi.reducerPath is \"productApi\", the store's state might look like this: \r\n\r\n\r\n\r\n\r\n\r\nExplanation\r\nmiddleware Property\r\nDefinition: The middleware property in the configureStore function is used to customize the middleware that will be applied to the Redux store. Middleware allows you to intercept actions and add custom logic before they reach the reducers.\r\ngetDefaultMiddleware Function\r\nProvided by Redux Toolkit: getDefaultMiddleware is a function provided by Redux Toolkit. When called, it returns an array of the default middleware recommended by Redux Toolkit.\r\nIncluded Middleware:\r\nRedux Thunk: Middleware that allows you to write action creators that return a function instead of an action, enabling complex synchronous logic.\r\nImmutable State Invariant Middleware: Checks if any state is mutated outside of reducers, helping to ensure immutability.\r\nSerializability Check Middleware: Ensures that actions and the state can be serialized, which is important for debugging, persisting, and rehydrating state.\r\nConcatenating productApi.middleware\r\nproductApi.middleware: This is a middleware generated by the createApi function from RTK Query. It handles various tasks related to API requests, such as:\r\nHandling API Requests: Dispatches actions for making API requests.\r\nCaching: Manages the caching of API responses to avoid redundant network requests.\r\nInvalidation: Invalidates cached data when certain actions occur, ensuring that stale data is updated.\r\nPolling: Supports polling mechanisms to periodically fetch fresh data.\r\nAutomatic Refetching: Refetches data when certain conditions are met, like a component re-mounting.\r\nCombining Default Middleware with Custom Middleware\r\nconcat Method: The concat method is used to add productApi.middleware to the array of default middleware.\r\ngetDefaultMiddleware(): Returns an array of default middleware.\r\n.concat(productApi.middleware): Adds the productApi.middleware to this array.\r\nDetailed Steps\r\nCall getDefaultMiddleware():\r\n\r\nThis function returns an array of default middleware that includes thunk, immutability checks, and serializability checks.\r\nAdd productApi.middleware:\r\n\r\nThe concat method adds productApi.middleware to the array of default middleware.\r\nResulting Middleware Array:\r\n\r\nThe resulting array includes all the default middleware plus the productApi.middleware.*/","map":{"version":3,"names":["configureStore","userReducer","productApi","authApi","userApi","store","reducer","auth","reducerPath","middleware","getDefaultMiddleware","concat"],"sources":["C:/Users/patil/OneDrive/Desktop/Developmment/shope-It/frontend/src/redux/store.js"],"sourcesContent":["import { configureStore } from \"@reduxjs/toolkit\";\r\nimport userReducer from \"./features/userSlice\";\r\nimport { productApi } from \"./api/productsApi\";\r\nimport { authApi } from \"./api/authApi\";\r\nimport { userApi } from \"./api/userApi\";\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    auth: userReducer,\r\n    [productApi.reducerPath]: productApi.reducer,\r\n    [authApi.reducerPath]: authApi.reducer,\r\n    [userApi.reducerPath]: userApi.reducer,\r\n  },\r\n  middleware: (getDefaultMiddleware) =>\r\n    getDefaultMiddleware().concat([\r\n      productApi.middleware,\r\n      authApi.middleware,\r\n      userApi.middleware,\r\n    ]),\r\n});\r\n\r\n/*\r\nSure, let's dive deeper into this part of the Redux store setup to make it even clearer.\r\n\r\nSetting Up Reducers\r\njavascript\r\nCopy code\r\nreducer: {\r\n  [productApi.reducerPath]: productApi.reducer,\r\n},\r\nreducer Property\r\nDefinition: The reducer property in configureStore is used to define the root reducer for the Redux store. The root reducer is an object where each key corresponds to a slice of state and each value is the reducer function that manages that slice of state.\r\n[productApi.reducerPath]: productApi.reducer\r\nDynamic Key: [productApi.reducerPath] is a computed property name in JavaScript. It means that the key in the reducer object is determined by the value of productApi.reducerPath.\r\nproductApi.reducerPath: This is a property provided by the API slice created with RTK Query. It typically resolves to a string like \"productApi\".\r\nReducer Function: productApi.reducer is the reducer function generated by RTK Query. This reducer function handles the state changes for the API slice, such as storing the fetched data, managing loading states, and handling errors.\r\nHow It Works Together\r\nComputed Property Name:\r\n\r\nWhen you use [productApi.reducerPath]: productApi.reducer, JavaScript evaluates productApi.reducerPath and uses its value as the key in the reducer object.\r\nIf productApi.reducerPath is \"productApi\", the reducer object will have a key named \"productApi\".\r\nStoring API State:\r\n\r\nproductApi.reducer is a function that handles the state changes for the API interactions defined in the productApi slice.\r\nBy assigning productApi.reducer to the key productApi.reducerPath, you ensure that the state managed by this reducer is stored under that key in the Redux store.\r\nRedux Store Structure:\r\n\r\nWith this configuration, the Redux store's state will have a structure where the state managed by productApi is nested under the key specified by productApi.reducerPath.\r\nFor example, if productApi.reducerPath is \"productApi\", the store's state might look like this: \r\n\r\n\r\n\r\n\r\n\r\nExplanation\r\nmiddleware Property\r\nDefinition: The middleware property in the configureStore function is used to customize the middleware that will be applied to the Redux store. Middleware allows you to intercept actions and add custom logic before they reach the reducers.\r\ngetDefaultMiddleware Function\r\nProvided by Redux Toolkit: getDefaultMiddleware is a function provided by Redux Toolkit. When called, it returns an array of the default middleware recommended by Redux Toolkit.\r\nIncluded Middleware:\r\nRedux Thunk: Middleware that allows you to write action creators that return a function instead of an action, enabling complex synchronous logic.\r\nImmutable State Invariant Middleware: Checks if any state is mutated outside of reducers, helping to ensure immutability.\r\nSerializability Check Middleware: Ensures that actions and the state can be serialized, which is important for debugging, persisting, and rehydrating state.\r\nConcatenating productApi.middleware\r\nproductApi.middleware: This is a middleware generated by the createApi function from RTK Query. It handles various tasks related to API requests, such as:\r\nHandling API Requests: Dispatches actions for making API requests.\r\nCaching: Manages the caching of API responses to avoid redundant network requests.\r\nInvalidation: Invalidates cached data when certain actions occur, ensuring that stale data is updated.\r\nPolling: Supports polling mechanisms to periodically fetch fresh data.\r\nAutomatic Refetching: Refetches data when certain conditions are met, like a component re-mounting.\r\nCombining Default Middleware with Custom Middleware\r\nconcat Method: The concat method is used to add productApi.middleware to the array of default middleware.\r\ngetDefaultMiddleware(): Returns an array of default middleware.\r\n.concat(productApi.middleware): Adds the productApi.middleware to this array.\r\nDetailed Steps\r\nCall getDefaultMiddleware():\r\n\r\nThis function returns an array of default middleware that includes thunk, immutability checks, and serializability checks.\r\nAdd productApi.middleware:\r\n\r\nThe concat method adds productApi.middleware to the array of default middleware.\r\nResulting Middleware Array:\r\n\r\nThe resulting array includes all the default middleware plus the productApi.middleware.*/\r\n"],"mappings":"AAAA,SAASA,cAAc,QAAQ,kBAAkB;AACjD,OAAOC,WAAW,MAAM,sBAAsB;AAC9C,SAASC,UAAU,QAAQ,mBAAmB;AAC9C,SAASC,OAAO,QAAQ,eAAe;AACvC,SAASC,OAAO,QAAQ,eAAe;AAEvC,OAAO,MAAMC,KAAK,GAAGL,cAAc,CAAC;EAClCM,OAAO,EAAE;IACPC,IAAI,EAAEN,WAAW;IACjB,CAACC,UAAU,CAACM,WAAW,GAAGN,UAAU,CAACI,OAAO;IAC5C,CAACH,OAAO,CAACK,WAAW,GAAGL,OAAO,CAACG,OAAO;IACtC,CAACF,OAAO,CAACI,WAAW,GAAGJ,OAAO,CAACE;EACjC,CAAC;EACDG,UAAU,EAAGC,oBAAoB,IAC/BA,oBAAoB,CAAC,CAAC,CAACC,MAAM,CAAC,CAC5BT,UAAU,CAACO,UAAU,EACrBN,OAAO,CAACM,UAAU,EAClBL,OAAO,CAACK,UAAU,CACnB;AACL,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}